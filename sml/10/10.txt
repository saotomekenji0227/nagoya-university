[作成課題] 実行結果
- [opening /tmp/emacs-region4265FzJ]
val it = () : unit
val it = () : unit
val it = () : unit
val time = fn : ('a -> 'b) -> 'a -> 'b
val fixedSeq = fn : int * int -> int array
val sortedSeq = fn : int -> int array
val swap = fn : 'a array * int * int -> unit
val partition = fn : int array * int * int * int -> int
val qsort = fn : int array * int * int -> unit
val sort = fn : int array -> unit
val qsort' = fn : int array * int * int -> unit
val sort' = fn : int array -> unit
val sortchecks = fn : int array * int -> bool
val sortcheck = fn : int array -> bool
val it = () : unit
- val ar1 = fixedSeq (1000,50);
val ar1 =
  [|360,225,851,383,157,77,695,172,836,926,655,175,415,653,676,539,421,596,
   422,692,594,262,866,617,480,448,808,431,592,694,474,893,640,235,987,651,
   284,568,182,70,203,973,344,431,617,5,16,222,735,726|] : int array
- sort ar1;
val it = () : unit
- ar1;
val it =
  [|5,16,70,77,157,172,175,182,203,222,225,235,262,284,344,360,383,415,421,
   422,431,431,448,474,480,539,568,592,594,596,617,617,640,651,653,655,676,
   692,694,695,726,735,808,836,851,866,893,926,973,987|] : int array
- sortcheck ar1;
val it = true : bool
- val ar1 = fixedSeq (1000,50);
val ar1 =
  [|360,225,851,383,157,77,695,172,836,926,655,175,415,653,676,539,421,596,
   422,692,594,262,866,617,480,448,808,431,592,694,474,893,640,235,987,651,
   284,568,182,70,203,973,344,431,617,5,16,222,735,726|] : int array
- sort' ar1;
val it = () : unit
- ar1;
val it =
  [|5,16,70,77,157,172,175,182,203,222,225,235,262,284,344,360,383,415,421,
   422,431,431,448,474,480,539,568,592,594,596,617,617,640,651,653,655,676,
   692,694,695,726,735,808,836,851,866,893,926,973,987|] : int array
- sortcheck ar1;
val it = true : bool
- val ar1 = sortedSeq 10000;
val ar1 =
  [|1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
   28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,
   53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,
   78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,...|]
  : int array
- time sort ar1;
37.390316 sec.
val it = () : unit
- time sort' ar1;
18.717155 sec.
val it = () : unit

[作成課題]考察
 まず、作成したsortcheckについて説明する。
sortcheck関数ではsortchecks関数の引数に0を与えた。
sortchecks関数では例外処理の他には(引数)番目と(引数-1)番目を比較し、ソートされてなければfalse、ソートされていれば再帰で次の要素についても比較することでソートチェックの関数として動作させた。

　次に、sort'について説明する。
sort'ではqsort'を呼び出した。qsort'ではpivotを決める直前でiの要素と((i+j) div 2)の要素を入れ替えることでほとんどソートされている配列に対するソートの高速化を図った。

　sortとsort'の動作について確認する。実行結果よりどちらのソートを用いても
- sortcheck ar1;
val it = true : bool
　と出力されており、50個の要素を確認してもソートされているため、どちらのソート関数でもソートできていることが分かる。

　次に実行要素についてみる。作成した等差数列を作成する関数で作った配列に対する実行結果をみると、
- time sort ar1;
37.390316 sec.
val it = () : unit
- time sort' ar1;
18.717155 sec.
val it = () : unit
　となっており、sort'関数はsort関数の半分程度の実行時間で処理できており、正常に高速化できたと考えられる。
