課題1.[作成課題] 実行結果
Standard ML of New Jersey v110.80 [built: Mon Oct  3 11:18:46 2016]
- [opening /tmp/emacs-region4195owV]
val accumulate = fn : ('a * 'b -> 'a) -> 'a -> (int -> 'b) -> int -> 'a
val summation = fn : (int -> int) -> int -> int
val power = fn : int -> int -> int
val f1 = fn : int -> int
val f2 = fn : int -> int
val f3 = fn : int -> int -> int
val it = () : unit
- summation (fn x => x) 5;
val it = 15 : int
- f1 5;
val it = 15 : int
- f2 5;
val it = 120 : int
- f3 5 3;
val it = 1641 : int

課題1.[作成課題] 考察
accumulateは引数に各項を組み合わせる演算を行う関数h、初期値z、k項目を計算する関数f、項の数nを与えて計算を行う関数である。
よって、各関数を与えた際の実行結果があっていることを、そのままこの関数があっているかの確認に用いる。

summantionは総和の関数であるため、漸化式は以下のようになる。
summantion(n) = f(1) ... n=1
              = summantion(n-1) + f(n) ...その他
本演習ではf(x) = x、項数n = 5で計算したため1+2+3+4+5=15となる。
実行結果を見ると、
- summation (fn x => x) 5;
val it = 15 : int
となっているため、summantionは正常に動作していると考えられる。

f1について、漸化式は以下のようになる。
f1(n) = 0 ... n=0
      = f1(n-1) + n ... その他
本演習では項数n = 5で計算したため1+2+3+4+5=15となる。
実行結果を見ると、
val it = 15 : int
- f1 5;
となっているため、f1は正常に動作していると考えられる。

f2について、漸化式は以下のようになる。
f2(n) = 1 ... n=0
      = f2(n-1) * n ... その他
本演習では項数n = 5で計算したため1*2*3*4*5=120となる。
実行結果を見ると、
- f2 5;
val it = 120 : int
となっているため、f2は正常に動作していると考えられる。

f3について、漸化式は以下のようになる。
f3(n) = 1 ... n=0
      = f3(n-1) * n * x^n ... その他

本演習ではn = 5、x=3で計算したため1*3^1 + 2*3^2 + 3*3^3 +4*3^4 + 5*3^5 = 1641となる。
実行結果を見ると、
- f3 5 3;
val it = 1641 : int
となっているため、f3は正常に動作していると考えられる。

以上より、summaiton及びf1からf3が正常に動作したためaccumulateは正常に動作していると考えられる。

課題2.[作成課題] 実行結果
Standard ML of New Jersey v110.80 [built: Mon Oct  3 11:18:46 2016]
- [opening /tmp/emacs-region41455rV]
val fib = fn : int -> int
val f1 = fn : int -> int -> bool
val g1 = fn : int -> bool
val f2 = fn : int -> int -> bool
val g2 = fn : int -> bool
val g1_5 = fn : unit -> bool * bool * bool * bool * bool
val g2_5 = fn : unit -> bool * bool * bool * bool * bool
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val time = fn : ('a -> 'b) -> 'a -> 'b
val it = () : unit
- time g1_5();
0.705892 sec.
val it = (true,false,false,false,true) : bool * bool * bool * bool * bool
- time g2_5();
0.0 sec.
val it = (true,false,false,false,true) : bool * bool * bool * bool * bool

課題2.[作成課題] 考察
f1、g1及びg1_5は2引数関数としてfibとmodを計算する方法で計算しており、f2、g2及びg2_5は関数を返す関数を利用した方法である。
g1_5とg2_5の実行結果を見てみると、g1_5は実行に0.705892秒かかっているのに対し、g2_5はtime関数では測定できないほど短い時間で処理が行われた。
考えられる理由としては、フィボナッチの計算をg1_5ではgに引数を与えるとき、つまりg1_5実行時に行っているのに対し、g2_5ではgを宣言した際に行われるため、フィボナッチ数列を計算する分だけg1の方が
